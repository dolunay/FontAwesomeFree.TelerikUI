@page "/"
@using System.Reflection
@using Syrna.Alpha.Icons.FontAwesomeFree.TelerikUI

<h1>Hello, world!</h1>

Welcome to your new app.

<br />

<TelerikButton OnClick="@SayHelloHandler" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Say Hello</TelerikButton>
<TelerikSvgIcon Icon="FontAwesomeFreeRegular.Calendar"></TelerikSvgIcon>
<TelerikSvgIcon Icon="FontAwesomeFreeRegular.Clock"></TelerikSvgIcon>
<TelerikSvgIcon Icon="FontAwesomeFreeSolid.Calendar"></TelerikSvgIcon>
<TelerikSvgIcon Icon="FontAwesomeFreeSolid.Clock"></TelerikSvgIcon>
<TelerikSvgIcon Icon="FontAwesomeFreeBrands.Microsoft"></TelerikSvgIcon>

<TelerikButton OnClick="@SayHelloHandler" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" Icon="FontAwesomeFreeSolid.Baby"></TelerikButton>

<br />
<h2>Regular Icons</h2>
<div>
@foreach (var icon in Regular)
{
    <span style="width:48px;height:48px;border:thin;border-color:aliceblue;display:inline-block">
        @* <div>@icon.Name</div> *@
        <div style="vertical-align:middle;align-items:center;width:48px;height:48px;display:inline-block" title="@icon.Name"><TelerikSvgIcon Icon="@icon"></TelerikSvgIcon></div>
    </span>
}
</div>
<h2>Solid Icons</h2>
<div>
@foreach (var icon in Solid)
{
    <span style="width:48px;height:48px;border:thin;border-color:aliceblue;display:inline-block">
        @* <div>@icon.Name</div> *@
        <div style="vertical-align:middle;align-items:center;width:48px;height:48px;display:inline-block" title="@icon.Name"><TelerikSvgIcon Icon="@icon"></TelerikSvgIcon></div>
    </span>
}
</div>
<h2>Brands Icons</h2>
<div>
@foreach (var icon in Brands)
{
    <span style="width:48px;height:48px;border:thin;border-color:aliceblue;display:inline-block">
        @* <div>@icon.Name</div> *@
        <div style="vertical-align:middle;align-items:center;width:48px;height:48px;display:inline-block" title="@icon.Name"><TelerikSvgIcon Icon="@icon"></TelerikSvgIcon></div>
    </span>
}
</div>
@helloString

@code {
    MarkupString helloString;

    void SayHelloHandler()
    {
        string msg = string.Format("Hello from <strong>Telerik Blazor</strong> at {0}.<br /> Now you can use C# to write front-end!", DateTime.Now);
        helloString = new MarkupString(msg);
    }

    List<ISvgIcon> regular;
    List<ISvgIcon> Regular
    {
        get
        {
            if (regular == null)
            {
                regular = new();
                var properties = typeof(FontAwesomeFreeRegular).GetProperties(BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Static);
                foreach (var property in properties)
                {
                    regular.Add((ISvgIcon)property.GetValue(this, null));
                }
            }

            return regular;
        }
    }

    List<ISvgIcon> solid;
    List<ISvgIcon> Solid
    {
        get
        {
            if (solid == null)
            {
                solid = new();
                var properties = typeof(FontAwesomeFreeSolid).GetProperties(BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Static);
                foreach (var property in properties)
                {
                    solid.Add((ISvgIcon)property.GetValue(this, null));
                }
            }

            return solid;
        }
    }

    List<ISvgIcon> brands;
    List<ISvgIcon> Brands
    {
        get
        {
            if (brands == null)
            {
                brands = new();
                var properties = typeof(FontAwesomeFreeBrands).GetProperties(BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Static);
                foreach (var property in properties)
                {
                    brands.Add((ISvgIcon)property.GetValue(this, null));
                }
            }

            return brands;
        }
    }

}