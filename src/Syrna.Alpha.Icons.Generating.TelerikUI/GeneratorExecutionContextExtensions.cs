using System.Text;
using CodeCasing;
using Microsoft.CodeAnalysis;
using Syrna.Alpha.Icons.Generating.TelerikUI.Internals;

namespace Syrna.Alpha.Icons.Generating.TelerikUI;

public class SourceResult
{
    public string Hint { get; set; }
    public string Source { get; set; }
}
public static class GeneratorExecutionContextExtensions
{
    public static readonly string[] ExcludedAttributes = ["class", "xmlns"];

    public static void MakeIconPacks(string svgsFolder, string ns, SourceProductionContext context)
    {
        var subDirList = Directory.EnumerateDirectories(svgsFolder);
        foreach (var subDir in subDirList)
        {
            MakeIconPack(subDir, ns, context);
        }
    }

    public static void MakeIconPack(string subDir, string ns, SourceProductionContext context)
    {
        var subDirName = new DirectoryInfo(subDir);
        var packName = ScrubPropertyName(subDirName.Name).ToPascalCase();
        var src = WriteIconClasses("FontAwesome.Icons", packName, ns, subDir);
        context.AddSource(src.Hint, src.Source);

        src = WriteIconsClass("FontAwesome", packName, ns, subDir);
        context.AddSource(src.Hint, src.Source);
        ignored = "";
    }
    public static SourceResult WriteIconsClass(
        //this GeneratorExecutionContext context,
        string className,
        string subClassName,
        string ns,
        string svgFolder,
        string searchPattern = "*.svg",
        Func<string, string>? propertyNameFromFileName = null,
        Func<string, bool>? isFileNameOk = null,
        bool skipColorScrub = false
        )
    {
        propertyNameFromFileName ??= GetMemberName;

        var attributesCollection = new AttributesCollection();

        var builderForStatic = new StringBuilder();

        builderForStatic.AppendLine("// <autogenerated/>");
        builderForStatic.AppendLine("using System.Collections.ObjectModel;");
        builderForStatic.AppendLine("using Telerik.SvgIcons;"); // Use Target Namespace
        builderForStatic.AppendLine($"namespace {ns};"); // Use Target Namespace
        builderForStatic.AppendLine("/// <summary>");
        builderForStatic.AppendLine($"/// Provides icons from the {className} {subClassName} library.");
        builderForStatic.AppendLine("/// </summary>");
        builderForStatic.AppendLine($"public static class {className}{subClassName}");
        builderForStatic.AppendLine("{");

        var files = Directory.GetFiles(svgFolder, searchPattern, SearchOption.AllDirectories);

        if (isFileNameOk is not null)
        {
            files = files.Where(x => isFileNameOk(x)).OrderBy(x => x.ToLowerInvariant()).ToArray();
        }

        var propertyNames = new List<string>();
        var iconMembersBuilder = new StringBuilder();
        foreach (var file in files)
        {
            var svg = File.ReadAllText(Path.Combine(svgFolder, file));
            var svgDoc = new SvgDocument(svg);
            svgDoc.Scrub(skipColorScrub);
            //var attributes = svgDoc.GetAttributes();
            //foreach (var exclude in ExcludedAttributes)
            //{
            //    attributes.Remove(exclude);
            //}

            //var attributesIndex = attributesCollection.FindOrAdd(attributes);
            //var svgContent = svgDoc.SvgNode.InnerHtml.Replace("\"", "\\\"");
            //var svgContentOneLine = svgContent.Replace("\r", "").Replace("\n", "");


            var propertyName = ScrubPropertyName(propertyNameFromFileName(file));
            propertyNames.Add(propertyName);
            if (!ignored.Contains(propertyName))
            {
                iconMembersBuilder.AppendLine("\t/// <summary>");
                iconMembersBuilder.AppendLine(
                    $"\t/// Gets the {propertyName} SvgIcon from the {className} {subClassName} library.");
                iconMembersBuilder.AppendLine("\t/// </summary>");
                iconMembersBuilder.Append("\tpublic static ");
                if (propertyName=="Equals") iconMembersBuilder.Append("new ");
                iconMembersBuilder.AppendLine($"ISvgIcon {propertyName} => new {subClassName}.{propertyName}();");
            }
        }

        builderForStatic.AppendLine(attributesCollection.ToCSharp());
        builderForStatic.AppendLine();
        builderForStatic.AppendLine(iconMembersBuilder.ToString());
        builderForStatic.AppendLine("}");
        return new SourceResult { Hint = $"{className}.{subClassName}.g.cs", Source = builderForStatic.ToString() };

        //context.AddSource($"{className}.g.cs", builderForStatic.ToString());
    }

    private static string ignored = "";
    public static SourceResult WriteIconClasses(
        //this GeneratorExecutionContext context,
        string className,
        string subClassName,
        string ns,
        string svgFolder,
        string searchPattern = "*.svg",
        Func<string, string>? propertyNameFromFileName = null,
        Func<string, bool>? isFileNameOk = null,
        bool skipColorScrub = false
        )
    {
        propertyNameFromFileName ??= GetMemberName;

        var attributesCollection = new AttributesCollection();

        var builderForStatic = new StringBuilder();

        builderForStatic.AppendLine("// <autogenerated/>");
        builderForStatic.AppendLine("using System.Collections.ObjectModel;");
        builderForStatic.AppendLine("using Telerik.SvgIcons;"); // Use Target Namespace
        builderForStatic.AppendLine($"namespace {ns}.{subClassName};"); // Use Target Namespace

        var files = Directory.GetFiles(svgFolder, searchPattern, SearchOption.AllDirectories);

        if (isFileNameOk is not null)
        {
            files = files.Where(x => isFileNameOk(x)).OrderBy(x => x.ToLowerInvariant()).ToArray();
        }

        var propertyNames = new List<string>();
        var iconMembersBuilder = new StringBuilder();
        foreach (var file in files)
        {
            var svg = File.ReadAllText(Path.Combine(svgFolder, file));
            var svgDoc = new SvgDocument(svg);
            svgDoc.Scrub(skipColorScrub);
            var attributes = svgDoc.GetAttributes();
            foreach (var exclude in ExcludedAttributes)
            {
                attributes.Remove(exclude);
            }

            attributes.TryGetValue("viewBox", out var viewBox);
            if (string.IsNullOrEmpty(viewBox)) viewBox = "0 0 512 512";
            //var attributesIndex = attributesCollection.FindOrAdd(attributes);
            var svgContent = svgDoc.SvgNode.InnerHtml.Replace("\"", "\\\"");
            var svgContentOneLine = svgContent.Replace("\r", "").Replace("\n", "");

            var propertyName = ScrubPropertyName(propertyNameFromFileName(file));
            var iconName = GetFileName(file);
            //if (svgContentOneLine.Length < 5120)
            //{
            propertyNames.Add(propertyName);
            iconMembersBuilder.AppendLine("/// <summary>");
            iconMembersBuilder.AppendLine($"/// Gets the {propertyName} SvgIcon from the {className} {subClassName} library.");
            iconMembersBuilder.AppendLine("/// </summary>");
            iconMembersBuilder.AppendLine($"public class {propertyName}:SvgIconBase {{");
            iconMembersBuilder.AppendLine($"    public {propertyName}() {{");
            iconMembersBuilder.AppendLine($"        Name = \"{iconName}\";");
            iconMembersBuilder.AppendLine($"        Content = \"{svgContentOneLine.Trim()}\";");
            iconMembersBuilder.AppendLine($"        ViewBox = \"{viewBox}\";");
            iconMembersBuilder.AppendLine($"    }}");
            iconMembersBuilder.AppendLine($"}}");
            //}
            //else ignored = ignored + propertyName + ",";
        }

        //builderForStatic.AppendLine(attributesCollection.ToCSharp());
        builderForStatic.AppendLine();
        builderForStatic.AppendLine(iconMembersBuilder.ToString());

        return new SourceResult { Hint = $"{className}.{subClassName}.g.cs", Source = builderForStatic.ToString() };
    }
    public static string ScrubPropertyName(string name)
    {
        var result = name;

        switch (result[0])
        {
            case '1':
                result = $"One{result.Substring(1)}";
                break;

            case '2':
                result = $"Two{result.Substring(1)}";
                break;

            case '3':
                result = $"Three{result.Substring(1)}";
                break;

            case '4':
                result = $"Four{result.Substring(1)}";
                break;

            case '5':
                result = $"Five{result.Substring(1)}";
                break;

            case '6':
                result = $"Six{result.Substring(1)}";
                break;

            case '7':
                result = $"Seven{result.Substring(1)}";
                break;

            case '8':
                result = $"Eight{result.Substring(1)}";
                break;

            case '9':
                result = $"Nine{result.Substring(1)}";
                break;

            case '0':
                result = $"Zero{result.Substring(1)}";
                break;

            default:
                break;
        }

        return result;
    }

    private static string GetMemberName(string fileName)
    {
        return Path.GetFileNameWithoutExtension(fileName).ToPascalCase();
    }
    private static string GetFileName(string fileName)
    {
        return Path.GetFileNameWithoutExtension(fileName);
    }
}